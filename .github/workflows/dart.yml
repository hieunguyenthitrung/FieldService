# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: APK release

on: workflow_dispatch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      # - uses: dart-lang/setup-dart@v1
      - uses: dart-lang/setup-dart@9a04e6d73cca37bd455e0608d7e5092f881fd603
      
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'
        
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.3.2'

      - name: Flutter version
        run: flutter --version

      - name: Cache pub dependencies
        uses: actions/cache@v2
        with:
          path: ${{ env.FLUTTER_HOME }}/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-pub-

      - name: Download pub dependencies
        run: flutter pub get

#       - name: Download Android keystore
#         id: android_keystore
#         uses: timheuer/base64-to-file@v1.0.3
#         with:
#           fileName: key.jks
#           encodedString: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}

      - name: Create key.properties
        run: |
          echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > android/key.properties
          echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties

      - name: Build Android App Bundle
        run: flutter build appbundle --release -t lib/main_prod.dart --flavor prod

#       - name: Build Android APK
#         run: flutter build apk --release -t lib/main_prod.dart --flavor prod
        
      - name: collect release artifacts #---> Cache APK file to Arifacts of Github, user can download for release builds.
        uses: actions/upload-artifact@v3
        with:
         name: release-apk
         # Path to the release files
#          path: build/app/outputs/flutter-apk/app-prod-release.apk
         path: build/app/outputs/bundle/prodRelease/app-prod-release.aab
     
#       - name: Upload APK to Diawi 
#         id: diawi
#         uses: rnkdsh/action-upload-diawi@v1.2.7
#         with:
#           token: ${{ secrets.DIAWI_TOKEN }}
#           file: ./build/app/outputs/flutter-apk/app-prod-release.apk
        
#       - name: Notify dedicated teams channel
#         uses: jdcargile/ms-teams-notification@v1.3
#         with:
#           github-token: ${{ github.token }} # this will use the runner's token.
#           ms-teams-webhook-uri: ${{ secrets.TEAM_HOOK }}
#           notification-summary: "Diawi URL = ${{ steps.diawi.outputs['url'] }}"
#           notification-color: 17a2b8
#           timezone: America/Denver   
         

      - name: Deploy to Play Store
        uses: r0adkll/upload-google-play@v1.0.18
        with:
          serviceAccountJsonPlainText: ${{secrets.GOOGLE_SERVICE_ACCOUNT_KEY}}
          packageName: ${{ secrets.ANDROID_PACKAGE_NAME }}
          releaseFiles: build/app/outputs/bundle/prodRelease/app-prod-release.aab
#           track: internal #---> Environment for Testing in Google Play
#           status: draft 
          track: production  #---> Environment for PRODUCTION in Google Play //production, beta, alpha, internalsharing, internal,
          status: completed #---> completed, inProgress, halted, draft
